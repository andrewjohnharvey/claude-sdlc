#!/bin/bash

# Claude-SDLC Installation Script
# This script installs the Claude-SDLC command suite into a project

set -e

# Default values
PROJECT_DIR="$(pwd)"
REPO_URL="https://github.com/andrewjohnharvey/claude-sdlc.git"
TEMP_DIR="/tmp/claude-sdlc-$(date +%s)"
UPDATE_MODE=false
DRY_RUN=false
VERBOSE=false
FORCE=false
LOG_FILE=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --dir)
      PROJECT_DIR="$2"
      shift 2
      ;;
    --update)
      UPDATE_MODE=true
      shift
      ;;
    --dry-run)
      DRY_RUN=true
      shift
      ;;
    --verbose)
      VERBOSE=true
      shift
      ;;
    --force)
      FORCE=true
      shift
      ;;
    --log)
      LOG_FILE="$2"
      shift 2
      ;;
    *)
      echo "Unknown option: $1"
      echo "Usage: bash install.sh [--dir /path/to/project] [--update] [--dry-run] [--verbose] [--force] [--log file.log]"
      exit 1
      ;;
  esac
done

# Setup logging
log() {
  local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
  echo "$message"
  
  if [[ -n "$LOG_FILE" ]]; then
    echo "$message" >> "$LOG_FILE"
  fi
}

execute() {
  if [[ "$VERBOSE" == true ]]; then
    log "EXEC: $*"
  fi
  
  if [[ "$DRY_RUN" == false ]]; then
    eval "$@"
  fi
}

# Verify project directory exists
if [[ ! -d "$PROJECT_DIR" ]]; then
  log "Error: Project directory '$PROJECT_DIR' does not exist."
  exit 1
fi

# Check if this is a git repository
if [[ ! -d "$PROJECT_DIR/.git" ]] && [[ "$FORCE" == false ]]; then
  log "Warning: '$PROJECT_DIR' does not appear to be a git repository."
  read -p "Continue anyway? (y/n): " confirm
  if [[ "$confirm" != "y" ]]; then
    log "Installation aborted."
    exit 1
  fi
fi

# Check for existing installation
if [[ -d "$PROJECT_DIR/.claude/commands" ]] && [[ "$UPDATE_MODE" == false ]] && [[ "$FORCE" == false ]]; then
  log "Claude-SDLC commands directory already exists."
  read -p "Update existing installation? (y/n): " confirm
  if [[ "$confirm" != "y" ]]; then
    log "Installation aborted."
    exit 1
  fi
  UPDATE_MODE=true
fi

# Clone the repository
log "Cloning Claude-SDLC repository..."
execute "git clone $REPO_URL $TEMP_DIR"

# Debug: Show what was cloned
if [[ "$VERBOSE" == true ]]; then
  log "Contents of cloned repository:"
  ls -la "$TEMP_DIR"
fi

# Create directory structure
log "Creating directory structure..."
execute "mkdir -p \"$PROJECT_DIR/.claude/commands\""
execute "mkdir -p \"$PROJECT_DIR/.claude-sdlc/features\""
execute "mkdir -p \"$PROJECT_DIR/.claude-sdlc/architecture\""
execute "mkdir -p \"$PROJECT_DIR/.claude-sdlc/builds\""
execute "mkdir -p \"$PROJECT_DIR/.claude-sdlc/reviews\""

# Copy command files
log "Copying command files..."
if [[ ! -d "$TEMP_DIR/commands" ]]; then
  log "Error: Commands directory not found in cloned repository at $TEMP_DIR/commands"
  log "Available directories in $TEMP_DIR:"
  ls -la "$TEMP_DIR"
  exit 1
fi

# Check if any .md files exist in commands directory
md_files=("$TEMP_DIR/commands"/*.md)
if [[ ! -f "${md_files[0]}" ]]; then
  log "Error: No .md files found in $TEMP_DIR/commands"
  log "Available files in commands directory:"
  ls -la "$TEMP_DIR/commands"
  exit 1
fi

execute "cp \"$TEMP_DIR/commands\"/*.md \"$PROJECT_DIR/.claude/commands/\""

# Initialize README files in each directory
if [[ "$DRY_RUN" == false ]]; then
  # Create README for features directory
  if [[ ! -f "$PROJECT_DIR/.claude-sdlc/features/README.md" ]]; then
    cat > "$PROJECT_DIR/.claude-sdlc/features/README.md" << EOF
# Features

This directory contains feature task lists created by the \`/create-feature\` command.
Each feature is defined in its own Markdown file with an atomic task list.
EOF
  fi

  # Create README for architecture directory
  if [[ ! -f "$PROJECT_DIR/.claude-sdlc/architecture/README.md" ]]; then
    cat > "$PROJECT_DIR/.claude-sdlc/architecture/README.md" << EOF
# Architecture

This directory contains architecture and design documentation for the project.
Place design specs, API contracts, ERDs, and other architectural documents here.
EOF
  fi

  # Create README for builds directory
  if [[ ! -f "$PROJECT_DIR/.claude-sdlc/builds/README.md" ]]; then
    cat > "$PROJECT_DIR/.claude-sdlc/builds/README.md" << EOF
# Builds

This directory stores build reports and logs generated by the \`/build\` command.
Each report includes summaries of tasks completed, changes made, and test results.
EOF
  fi

  # Create README for reviews directory
  if [[ ! -f "$PROJECT_DIR/.claude-sdlc/reviews/README.md" ]]; then
    cat > "$PROJECT_DIR/.claude-sdlc/reviews/README.md" << EOF
# Reviews

This directory contains code review reports generated by the \`/code-review\` command.
Each report includes analysis of code quality, security, and performance.
EOF
  fi
fi

# Clean up
log "Cleaning up temporary files..."
execute "rm -rf $TEMP_DIR"

# Final instructions
if [[ "$DRY_RUN" == false ]]; then
  log "Claude-SDLC installation complete!"
  log "Available commands:"
  log "  - /create-feature - Plan and define a new feature"
  log "  - /build - Implement a planned feature"
  log "  - /code-review - Perform a comprehensive code review"
  log "  - /security-audit - Analyze code for security vulnerabilities"
  log ""
  log "To verify installation, run '/help' in Claude Code to see the available commands."
else
  log "Dry run completed. No changes were made."
fi

log "Installation process finished."
